= LunarProbe Debugger Client =

A simple client is provided with the debugger.  It is in the "client" folder of the installation.  It can be run with the command:

*python client.py run*

Note that the program running your lua scripts must already running before the debugger can be invoked otherwise the client will not start.

The commands that can be used in the client are shown below.  It is attached to a test debug server that opens a few lua stacks.  Here is more info on the [http://lunarprobe.googlecode.com]test debug server.

== Debugger Client Commands ==

Firstly, when the client is run as mentioned in the previous step, the debugger prompt is presented.  It is something like:

*LDB:*

This is a very simple mockup and once I get a feel for all the different IDEs/Editors we use, I/We could come up with something like eclipse/netbeans plugins and so on.

At the prompt, typing *"help"* will give a list of commands and their usage.  Commands with "empty" help text are not  yet implemented.

The main commands you need to know are:
   * <p /> *Breakpoint Commands*: break, clear, clearall
   * <p /> *Program Flow Commands*: next, step, continue, finish,  until
   * <p /> *Data Related Commands*: contexts, locals, local, frame, eval
   * <p /> *Miscellaneous Commands*: file, help

===Data Related Commands       ===

====contexts====
The lua stack is also known as the context.  Each stack that is attached to becomes a context that is visible to the debugger client.  To get a list of contexts currently opened, use the contexts command without any parameters.  An example of the output is:

{{{

Contexts:
=========
    Name: 'a', Addr: 0x97d3198, Running: False
                At: {u'what': u'Lua', u'name': u'abctotable', u'currentline': 29, u'linedefined': 28, u'namewhat': u'global', u'lastlinedefined': 51, u'nups': 0, u'source': u'@test.lua', u'event': 0}
    Name: 'c', Addr: 0x97f4320, Running: True
    Name: 'b', Addr: 0x97e31c8, Running: True
    Name: 'debugger', Addr: 0x97ef118, Running: True

</pre>
}}}

In the above example, we are currently debugging 3 contexts.  The first two were created by game engine and the also is actually the debugger stack opened by the lua debugger.  Oh did I mention that a big chunk of the lua debugger, which is written in Lua, can also be debugged in the debugger!!!  Though dont go to crazy with this feature as it is hardly tested!

The huge bit of fluff ending with "At: ..." shows where the context is paused.  Only the first one is paused as it has hit a breakpoint (at abctotable).

Keep an eye on the "Addr" parameter.  This is very very important as nearly all run/flow related commands will reference this in one way or another.

====locals====

This commands prints out all the local variables in a specific context and stack frame.  The command is run as:

*locals <context> <frame>*

Where context is the "Addr" parameter found in the contexts command above, and frame (if not specified) defaults to 0.

So with the above example (locals 0x97d3198), the following output is printed:


{{{

Locals:
=======
    Name: '{u'index': 1, u'name': u'a'}'
    Name: '{u'index': 2, u'name': u'b'}'
    Name: '{u'index': 3, u'name': u'c'}'

}}}

Again note the "index" parameter above.  This index must be passed when getting information about a particular variable instead of the name.

Another thing is the variables in lua are defined the first time they are encountered.  So even though the function "abctotable" has quite a few local variables, only a, b and c are defined when the function is first entered.  As we step through the lines more variables will come into play.

So in the same function, after stepping through about 8 lines, we get this:

{{{

Locals:
=======
    Name: '{u'index': 1, u'name': u'a'}'
    Name: '{u'index': 2, u'name': u'b'}'
    Name: '{u'index': 3, u'name': u'c'}'
    Name: '{u'index': 4, u'name': u'tab'}'
    Name: '{u'index': 5, u'name': u'output'}'
    Name: '{u'index': 6, u'name': u'd'}'
    Name: '{u'index': 7, u'name': u'e'}'

}}}

====local ====

This commands prints out the value of a particular local variable.  The usage is:

<div style="margin-left: 120px;"> *local <context> <index> <nlevels> <frame>*
</div>
where the parameters are:
<div style="margin-left: 40px;"> *context* - the address of the context whose local variables are to be printed - see the "contexts" command.</div>
<div style="margin-left: 40px;"> *index* - the index of the local variable to be printed (see the locals command for a list of locals) - defaults to 0</div>
<div style="margin-left: 40px;"> *nlevels* - how many levels to recurse this variable - ie if the variable is a table, we can recursively print the value to this many levels - defaults to 1.</div>
<div style="margin-left: 40px;"> *frame* - the frame in which the local variable is located - defaults to 0 </div>

For the command *local 0x97d3198 1*, the following is the output:

{{{

Name: a, Type:  number
Value:  1

}}}

For a more complex variable like a table (eg variable 4), we have the following:

{{{

Name: tab, Type:  table
    [a (string)]     ->      1 : (number)
    [d (string)]     ->      0x9821a18 : (table)
    [c (string)]     ->      0x9816b08 : (table)
    [b (string)]     ->      2 : (number)

}}}

Note that the keys "c" and "d" have values that are themselves tables.  To drill into these, print the above variable as:

<div style="margin-left: 120px;"> *local 0x97d3198 4 2* </div>

which prints the following output:

{{{

Name: tab, Type:  table
    [a (string)]     ->      1 : (number)
    [d (string)]     -> 
        [a (string)]     ->      1 : (number)
        [b (string)]     ->      2 : (number)
    [c (string)]     -> 
        [1 (number)]     ->      1 : (number)
        [2 (number)]     ->      2 : (number)
    [b (string)]     ->      2 : (number)

}}}

Note: the actual lua table value is:
{{{
{["a"] = 1, ["b"] = 2, ["c"] = {1, 2}, ["d"] = {["a"] = 1, ["b"] = 2}}
}}}

====eval   ====

===Breakpoint Commands       ===

====break ====

====clear ====

====clearall ====

====Program Flow Commands       ====

==== step ====

==== next ====

==== continue ====

==== finish ====

==== until ====

=== Miscellaneous Commands       ===

==== file ====

This commands prints out the contents of a file between given ranges.

The syntax is:

<div style="margin-left: 80px;"> *file <filename> <firstline> <lastline>* </div>

*firstline* and *lastline* are optional and default to 0 and -1 (indicating the "last" line of the file).

For example, file *test.lua 5 10* would have the following output:

{{{

     5 > function test1()
     6 >     for i = 1, 10 do
     7 >         print("In Test1: " .. tostring(i))
     8 >     end
     9 > end
    10 > 

}}}

==== print  ==== 